{"version":3,"file":"feedback.service.js","sourceRoot":"","sources":["../../home/flo/masterproject/repository/feedback_gathering/reporting_frontend/tmp/broccoli_type_script_compiler-input_base_path-BaYriyF2.tmp/0/src/app/services/feedback.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAAyC,eAAe,CAAC,CAAA;AACzD,qBAAwC,eAAe,CAAC,CAAA;AACxD,QAAO,uBACP,CAAC,CAD6B;AAC9B,2BAA2B,iBAAiB,CAAC,CAAA;AAE7C,oCAAoC,uBAAuB,CAAC,CAAA;AAG5D;IAOI,yBAAoB,IAAU,EAAU,aAAkC;QAAtD,SAAI,GAAJ,IAAI,CAAM;QAAU,kBAAa,GAAb,aAAa,CAAqB;QAHnE,sBAAiB,GAA6B,IAAI,mBAAY,EAAE,CAAC;QACjE,0BAAqB,GAA2B,IAAI,mBAAY,EAAE,CAAC;QAGtE,IAAI,CAAC,GAAG,GAAG,aAAa,CAAC,gBAAgB,CAAC;QAE1C,IAAI,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IACtD,CAAC;IAEM,sCAAY,GAAnB,UAAoB,WAAmB;QAAvC,iBAIC;QAHC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,WAAW,GAAG,YAAY,CAAC;aACxD,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAY,QAAQ,CAAC,IAAI,EAAE,EAA3B,CAA2B,CAAC;aACxD,SAAS,CAAC,UAAC,IAAI,IAAK,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAjC,CAAiC,CAAC,CAAA;IAC3D,CAAC;IAEM,wCAAc,GAArB,UAAsB,QAAkB;QACtC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAEO,qCAAW,GAAnB,UAAoB,KAAe;QAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;IAClE,CAAC;IA5BL;QAAC,iBAAU,EAAE;;uBAAA;IA6Bb,sBAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,uBAAe,kBA4B3B,CAAA","sourcesContent":["/**\n * Created by flo on 14.07.16.\n */\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map'\nimport { Observable } from 'rxjs/Observable';\nimport { Feedback } from '../models/Feedback';\nimport { ServerConfiguration } from './ServerConfiguration';\n\n@Injectable()\nexport class FeedbackService{\n    private url: string;\n    private headers: Headers;\n\n    public feedbackListEvent: EventEmitter<Feedback[]> = new EventEmitter();\n    public selectedFeedbackEvent: EventEmitter<Feedback> = new EventEmitter();\n\n    constructor(private http: Http, private configuration: ServerConfiguration){\n        this.url = configuration.ServerWithApiUrl;\n\n        this.headers = new Headers();\n        this.headers.append('Accept', 'application/json');\n    }\n\n    public GetFeedbacks(application: string){\n      return this.http.get(this.url + application + \"/feedbacks\")\n        .map((response: Response) => <Feedback[]>response.json())\n        .subscribe((data) => this.feedbackListEvent.emit(data))\n    }\n\n    public SelectFeedback(feedback: Feedback){\n      this.selectedFeedbackEvent.emit(feedback);\n    }\n\n    private handleError(error: Response){\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n}\n"]}